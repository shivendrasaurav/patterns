@import "variables";

// Common Devices - Not Responsive
.grid-row {
    display: flex;
    flex-grow: 1;
    flex-wrap: wrap;

    &--vertical{
        flex-direction: column;
    }

    @for $i from 0 through $partitions {
        .col-width-#{$i} {
            @if $i == 0 {
                display: none;
            }
            @else {
                flex: calc(#{$i} / $partitions);
                min-width: calc(100% / $partitions * #{$i});
                max-width: calc(100% / $partitions * #{$i});
            }
        }
    }
    @for $i from 0 through $gutters {
        .gutter-width-#{$i} {
            @if $i == 0 {
                display: none;
            }
            @else {
                content: " ";
                flex: calc(#{$i} / $gutters);
                min-width: calc(100% / $gutters * #{$i});
                max-width: calc(100% / $gutters * #{$i});
            }
        }
    }
}

// Square Devices
@media screen and (aspect-ratio: 1) {
    .grid-row {
        display: flex;
        flex-grow: 1;
        flex-wrap: wrap;

        &--vertical{
            flex-direction: column;
        }

        @for $i from 0 through $partitions {
            .col-width-#{$i}-sq {
                @if $i == 0 {
                    display: none;
                }
                @else {
                    flex: calc(#{$i} / $partitions);
                    min-width: calc(100% / $partitions * #{$i});
                    max-width: calc(100% / $partitions * #{$i});
                }
            }
        }
    }
}

// Portrait Devices
@media screen and (max-aspect-ratio: 0.9999) {
    .grid-row {
        display: flex;
        flex-grow: 1;
        flex-wrap: wrap;

        &--vertical{
            flex-direction: column;
        }

        @for $i from 0 through $partitions {
            .col-width-#{$i}-sm {
                @if $i == 0 {
                    display: none;
                }
                @else {
                    flex: calc(#{$i} / $partitions);
                    min-width: calc(100% / $partitions * #{$i});
                    max-width: calc(100% / $partitions * #{$i});
                }
            }
        }
    }
}

// Landscape Devices
@media screen and (min-aspect-ratio: 1.0001) {
    .grid-row {
        display: flex;
        flex-grow: 1;
        flex-wrap: wrap;

        &--vertical{
            flex-direction: column;
        }

        @for $i from 0 through $partitions {
            .col-width-#{$i}-ld {
                @if $i == 0 {
                    display: none;
                }
                @else {
                    flex: calc(#{$i} / $partitions);
                    min-width: calc(100% / $partitions * #{$i});
                    max-width: calc(100% / $partitions * #{$i});
                }
            }
        }
    }
}

// Row Alignment
.row-left {
    justify-content: flex-start;
    justify-items: flex-start;
}
.row-right {
    justify-content: flex-end;
    justify-items: flex-end;
}
.row-center {
    justify-content: center;
    justify-items: center;
}
.row-top {
    align-items: flex-start;
    align-content: flex-start;
}
.row-bottom {
    align-items: flex-end;
    align-content: flex-end;
}
.row-middle {
    align-items: center;
    align-content: center;
}

// Define the Row Height Classes
.col-height-auto {
    height: max-content;
}
.col-height {
    &--auto{
        height: max-content;
    }
    &--inherit{
        height: inherit;
    }
}
@for $i from 0 through 10 {
    .col-height-#{$i} {
        height: calc(10vh * #{$i});

        &--min{
            min-height: calc(10vh * #{$i});
        }
        &--max{
            max-height: calc(10vh * #{$i});
        }
    }
}
